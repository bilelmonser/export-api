App\Entity\Accounting:
  attributes:
    security: 'is_granted("ROLE_USER")'
    route_prefix: /sage/company
  collectionOperations:
    get:
      controller: NotFoundAction::class
      read: false
      output: false
      openapi_context:
        summary: hidden
    sage_accounting_get_periods:
      denormalization_context:
        groups: [ 'accounting:write' ]
      method: 'GET'
      path: /sage/accounting/getPeriods/accountPractice/{accountPractice}/companyId/{companyId}
      controller: AccountingController::class
      read: ['false']
      output: ['true']

      openapi_context:
        security:
          - bearerAuth:
        summary: Get All Periods from Accountancy Practices and Comapny Id.
        description: >
          - With this endpoint you can get All Periods from Accountancy Practices and Comapny Id

          - Mandatory parameters  :

        parameters:
          - in: path
            name: accountPractice
            schema:
              type: string
            allowEmptyValue: false
            required: true
          - in: path
            name: companyId
            schema:
              type: string
            allowEmptyValue: false
            required: true

        responses:
          '400':
            description: Bad request.
          '401':
            description: JWT Token not found.
          '5XX':
            description: Unexpected error.
    sage_accounting_get_entires:
      denormalization_context:
        groups: [ 'accounting:write' ]
      method: 'GET'
      path: /sage/accounting/getEntries/accountPractice/{accountPractice}/companyId/{companyId}/periodId/{periodId}
      controller: AccountingController::class
      read: ['false']
      output: ['true']

      openapi_context:
        security:
          - bearerAuth:
        summary: Get All Entries by Company and Period.
        description: >
          - Get All Entries by Company and Period.

          - Mandatory parameters  :

        parameters:
          - in: path
            name: accountPractice
            schema:
              type: string
            allowEmptyValue: false
            required: true
          - in: path
            name: companyId
            schema:
              type: string
            allowEmptyValue: false
            required: true
          - in: path
            name: periodId
            schema:
              type: string
            allowEmptyValue: false
            required: true

        responses:
          '400':
            description: Bad request.
          '401':
            description: JWT Token not found.
          '5XX':
            description: Unexpected error.
    sage_accounting_create_entry:
      denormalization_context:
        groups: [ 'tax:write' ]
      method: 'POST'
      path: /sage/accounting/createEntry/accountPractice/{accountPractice}/companyId/{companyId}/periodId/{periodId}
      requirements:
        id: \d+
      controller: TaxResidenceController::class
      read: [ 'false' ]
      output: [ 'true' ]

      openapi_context:
        security:
          - bearerAuth:
        summary: Create a new Entry  It allows you to create a new accounting entry for the given period.
        description: >
          - Create a new accounting entry.

        parameters:
          - in: path
            name: accountPractice
            schema:
              type: string
            allowEmptyValue: false
            required: true
          - in: path
            name: companyId
            schema:
              type: string
            allowEmptyValue: false
            required: true
          - in: path
            name: periodId
            schema:
              type: string
            allowEmptyValue: false
            required: true

        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  country:
                    type: string
                    min: 2
                    max: 3
                    description: country of the resident.

                  taxPayerId:
                    type: string
                    max: 255
                    description: Tax payer's id.

                  liabilityWaiver:
                    type: boolean
                    default: true
                    description: When there is no taxPayerId for a residence, this field shall be set to true.

                example:
                  country: 'TU'
                  taxPayerId: 'xxxxxxxxxxxxxxxx'
                  liabilityWaiver: 1

        responses:
          '201':
            description: TaxResidence created successfully.
          '400':
            description: Bad request.
          '401':
            description: JWT Token not found.
          '406':
            description: Tax Residence Id all ready in use .
          '422':
            description: UserCsb not found.
          '5XX':
            description: Unexpected error.
  itemOperations:
    get:
      normalization_context:
        groups: [ 'kyb:read','kyc:read' ]

      openapi_context:
        summary: hidden
    